
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define NUMFLAKES     10 // Number of snowflakes in the animation example

#define bitmap_height   128
#define bitmap_width    64
static const unsigned char PROGMEM bitmap[] =
{ 0xff, 0xff, 0xe0, 0x06, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xf1, 0x08, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 
	0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 
	0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 
	0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 
	0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 
	0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x01, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 
	0xff, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 
	0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x1d, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 
	0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x11, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xe4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 
	0xff, 0xff, 0xff, 0xff, 0xf7, 0xe0, 0xe5, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0xe0, 
	0xff, 0xff, 0xff, 0xff, 0xf7, 0xc0, 0x65, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xef, 0xf0, 
	0xff, 0xff, 0xff, 0xdf, 0xf7, 0xc7, 0xf5, 0xe0, 0x00, 0x00, 0x00, 0xe0, 0x07, 0xdf, 0xef, 0xf8, 
	0xff, 0xff, 0xff, 0xbf, 0xf7, 0xdf, 0xfd, 0xe0, 0x00, 0x00, 0x00, 0xa8, 0x07, 0xdf, 0xcf, 0xfc, 
	0xff, 0xff, 0xff, 0xbf, 0xf7, 0xdf, 0xe7, 0xf0, 0x00, 0x00, 0x00, 0xe8, 0x47, 0x9f, 0xcf, 0xfc, 
	0xff, 0xff, 0xff, 0xff, 0xf7, 0xfe, 0x6f, 0xf0, 0x00, 0x00, 0x00, 0xc9, 0xc7, 0x1f, 0xcf, 0xfd, 
	0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0x5b, 0xf1, 0xe0, 0x00, 0x02, 0xf8, 0x0e, 0xdf, 0xdf, 0xfd, 
	0xff, 0xff, 0xff, 0xff, 0xf7, 0xf7, 0xd3, 0xff, 0xf8, 0x00, 0x02, 0xf8, 0x4f, 0xdf, 0xdf, 0xfd, 
	0xff, 0xff, 0xff, 0xff, 0xf5, 0xf7, 0xf3, 0xf8, 0xfc, 0x00, 0x02, 0xc8, 0x4f, 0xdf, 0xdf, 0xf9, 
	0xff, 0xff, 0xf0, 0xff, 0xf0, 0xf7, 0xf7, 0x80, 0xfc, 0x00, 0x02, 0xc8, 0xcf, 0xdf, 0xff, 0xf9, 
	0xff, 0xff, 0xf0, 0xfb, 0x70, 0xf7, 0xf7, 0xd1, 0xf8, 0x00, 0x06, 0xe8, 0xcf, 0xdf, 0xdf, 0xf9, 
	0xff, 0xff, 0xf0, 0xfa, 0x30, 0xf7, 0xff, 0x80, 0xf0, 0x00, 0x06, 0xf8, 0xcf, 0xdf, 0xdf, 0xf9, 
	0xff, 0xff, 0xf0, 0xfe, 0x00, 0xf7, 0xff, 0xf9, 0xe0, 0x00, 0x02, 0xc8, 0x4f, 0xdf, 0xdf, 0xf8, 
	0xff, 0xff, 0xf0, 0xe3, 0x02, 0xc7, 0xff, 0xff, 0xe3, 0x80, 0x06, 0xc8, 0x4f, 0xdf, 0xdf, 0xf8, 
	0xff, 0xff, 0xf0, 0x67, 0x01, 0x97, 0xff, 0xff, 0xe3, 0xc0, 0x06, 0xc8, 0x4f, 0xdf, 0xdf, 0xf0, 
	0xef, 0xff, 0xf0, 0x70, 0x06, 0x1f, 0xff, 0xff, 0xe3, 0xf0, 0x06, 0x48, 0x0f, 0x9f, 0xdf, 0xf8, 
	0xff, 0xff, 0xf0, 0xfa, 0x10, 0x9f, 0xff, 0xff, 0xe3, 0xf0, 0x06, 0x58, 0x0f, 0x9f, 0xc7, 0xf0, 
	0xbf, 0xff, 0xf8, 0xfe, 0x21, 0xbf, 0xff, 0xff, 0xe1, 0xf0, 0x06, 0x48, 0x0f, 0x9f, 0x87, 0xf0, 
	0xff, 0xff, 0xf8, 0xe3, 0x30, 0x7f, 0xf7, 0xff, 0xe0, 0xe0, 0x06, 0x48, 0x07, 0x8f, 0x87, 0xe0, 
	0xdf, 0xff, 0xf8, 0xfe, 0x00, 0x1f, 0xe7, 0xdf, 0x80, 0xe0, 0x02, 0x08, 0x03, 0x9f, 0xc7, 0xe4, 
	0x1f, 0xff, 0xf8, 0xfe, 0x00, 0x2f, 0xe7, 0xbf, 0xc0, 0xe1, 0x02, 0x0c, 0x1b, 0x9f, 0x07, 0xf8, 
	0xbf, 0xff, 0xf8, 0xfc, 0x00, 0x01, 0xe7, 0xff, 0xf0, 0xc7, 0x00, 0x01, 0xf9, 0x9f, 0x07, 0xf4, 
	0xff, 0xff, 0xf8, 0xfc, 0x00, 0x07, 0xff, 0xf8, 0x00, 0xc7, 0x00, 0x21, 0xf8, 0x1e, 0x07, 0xfe, 
	0x1f, 0xff, 0xf8, 0xd8, 0x00, 0x05, 0xff, 0xff, 0xc0, 0xc7, 0x80, 0x01, 0xf8, 0x38, 0x01, 0xfe, 
	0x1f, 0xff, 0xf8, 0x30, 0x00, 0x3f, 0xdf, 0xff, 0xc1, 0x8f, 0xc0, 0x06, 0xb0, 0x30, 0xe0, 0x04, 
	0x0f, 0xff, 0xf8, 0xf0, 0x00, 0x3f, 0x67, 0xff, 0xe7, 0x1f, 0xd8, 0x8b, 0x20, 0x00, 0x00, 0x00, 
	0xff, 0xff, 0xf8, 0x60, 0x00, 0x3c, 0xcf, 0xff, 0xfe, 0x1f, 0x3f, 0x63, 0x20, 0x00, 0x00, 0x08, 
	0xff, 0xff, 0xf8, 0xe0, 0x00, 0x3b, 0xf7, 0xff, 0xf0, 0x3e, 0x7c, 0x55, 0xf0, 0x00, 0x08, 0x38, 
	0xff, 0xff, 0xf8, 0x40, 0x00, 0x3f, 0xef, 0xff, 0xf0, 0x3f, 0xf0, 0x73, 0x80, 0x00, 0x18, 0x44, 
	0xff, 0xff, 0xf8, 0x60, 0x00, 0x7f, 0x9f, 0xff, 0xe0, 0x3f, 0x91, 0xcb, 0xa0, 0x00, 0x78, 0x44, 
	0xff, 0xff, 0xf8, 0x60, 0x00, 0x78, 0x0f, 0xf8, 0x00, 0x7f, 0xfe, 0xe4, 0xf0, 0x06, 0x70, 0x06, 
	0xff, 0xff, 0xf8, 0x60, 0x00, 0x40, 0x0f, 0xfc, 0x00, 0x7f, 0xfb, 0x03, 0xff, 0xff, 0x70, 0x07, 
	0xff, 0xff, 0xf8, 0x20, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x3f, 0xff, 0x05, 0xff, 0xf1, 0x70, 0x03, 
	0xff, 0xff, 0xf8, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x0f, 0xf6, 0x01, 0xff, 0xe8, 0x70, 0x01, 
	0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xc0, 0x03, 0xf4, 0x41, 0xff, 0xf8, 0x70, 0x01, 
	0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x03, 0xff, 0x80, 0x01, 0xf6, 0x00, 0x7d, 0xf8, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0x90, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x34, 0x00, 0x7f, 0xfe, 0x00, 0x00, 
	0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xd0, 0x00, 0x02, 0x00, 0x1f, 0x40, 0x00, 0x00, 
	0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x01, 0x00, 0x07, 0xe0, 0x00, 0x03, 
	0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x0f, 
	0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x01, 
	0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x01, 
	0x1f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x61, 
	0x1f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x40, 
	0xdf, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0xc0, 
	0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0xe0, 
	0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0xa1, 
	0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x70, 0x01, 0xa0, 
	0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x70, 0x00, 0xa1 };

void setup() {
  Serial.begin(115200);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
  display.display();
  display.clearDisplay();
    display.drawBitmap(0, 0, bitmap, bitmap_height, bitmap_width, WHITE);
  display.display();
  delay(2000);
  testdrawchar();
  // display.display() is NOT necessary after every single drawing command,
  // unless that's what you want...rather, you can batch up a bunch of
  // drawing operations and then update the screen all at once by calling
  // display.display(). These examples demonstrate both approaches...
display.clearDisplay();
 display.drawRoundRect(30, 20, 30, 40, 5, WHITE);
  display.drawRoundRect(70, 20, 30, 40, 5, WHITE);
  card1Spade();
  card2Spade();
  c1Val();
  c2Val();
display.display();
     // Draw characters of the default font

}

void loop() {
}


void testdrawchar(void) {
  display.clearDisplay();

  display.setTextSize(2);      // Normal 1:1 pixel scale
  display.setTextColor(WHITE); // Draw white text
  display.setCursor(0, 30);     // Start at top-left corner
  display.cp437(true);         // Use full 256 char 'Code Page 437' font

  // Not all the characters will fit on the display. This is normal.
  // Library will draw what it can and the rest will be clipped.
  // for(int16_t i=0; i<256; i++) {
  //   if(i == '\n') display.write(' ');
  //   else          display.write(i);
  // }
  display.write("HOLY MOLY GUACAMOLE");
  display.display();
  delay(2000);
}

void card1Heart(){  //THIS HEART SUCKS BUT I CANT DO ANY BETTER RN
   display.fillCircle(43, 28, 4, WHITE);
  display.fillCircle(52, 28, 4, WHITE);
  display.fillTriangle(39, 30, 56, 30, 47, 39, WHITE);
}
void card1Diamond(){
display.fillTriangle(45, 30, 55, 30, 50, 38, WHITE);
display.fillTriangle(45, 29, 55, 29, 50, 22, WHITE);
}
void card2Diamond(){
display.fillTriangle(85, 30, 95, 30, 90, 38, WHITE);
display.fillTriangle(85, 29, 95, 29, 90, 22, WHITE);
}
void card1Club(){
	display.fillCircle(50, 24, 3, WHITE);
	display.fillCircle(46, 30, 3, WHITE);
	display.fillCircle(54, 30, 3, WHITE);
	display.fillTriangle(48, 37, 52, 37, 50, 26, WHITE);
}
void card2Club(){
	display.fillCircle(90, 24, 3, WHITE);
	display.fillCircle(86, 30, 3, WHITE);
	display.fillCircle(94, 30, 3, WHITE);
	display.fillTriangle(88, 37, 92, 37, 90, 26, WHITE);
}
void card1Spade(){
	display.fillTriangle(48, 37, 52, 37, 50, 26, WHITE);
	display.fillTriangle(44, 30, 56, 30, 50, 22, WHITE);
	display.fillCircle(46, 30, 3, WHITE);
	display.fillCircle(54, 30, 3, WHITE);
}
void card2Spade(){
	display.fillTriangle(88, 37, 92, 37, 90, 26, WHITE);
	display.fillTriangle(84, 30, 96, 30, 90, 22, WHITE);
	display.fillCircle(86, 30, 3, WHITE);
	display.fillCircle(94, 30, 3, WHITE);
}
void card2Heart(){  //THIS HEART SUCKS BUT I CANT DO ANY BETTER RN
   display.fillCircle(83, 28, 4, WHITE);
  display.fillCircle(92, 28, 4, WHITE);
  display.fillTriangle(79, 30, 96, 30, 87, 39, WHITE);
}

void c1Val(){
   display.setTextSize(2);      // Normal 1:1 pixel scale
  display.setTextColor(WHITE); // Draw white text
  display.setCursor(35, 42);     // Start at top-left corner
  display.cp437(true);         // Use full 256 char 'Code Page 437' font
  display.write("7");
}
void c2Val(){
   display.setTextSize(2);      // Normal 1:1 pixel scale
  display.setTextColor(WHITE); // Draw white text
  display.setCursor(75, 42);     // Start at top-left corner
  display.cp437(true);         // Use full 256 char 'Code Page 437' font
  display.write("Q");
}
#define XPOS   0 // Indexes into the 'icons' array in function below
#define YPOS   1
#define DELTAY 2
